HOST A DYNAMIC WEB APP ON AWS WITH DOCKER, AMAZON ECR AND AMAZON ECS

# Use the latest version of the Amazon Linux base image
FROM amazonlinux:2

# Update all installed packages to thier latest versions
RUN yum update -y 

# Install the unzip package, which we will use it to extract the web files from the zip folder
RUN yum install unzip -y

# Install wget package, which we will use it to download files from the internet 
RUN yum install -y wget

# Install Apache
RUN yum install -y httpd

# Install PHP and various extensions
RUN amazon-linux-extras enable php7.4 && \
  yum clean metadata && \
  yum install -y \
    php \
    php-common \
    php-pear \
    php-cgi \
    php-curl \
    php-mbstring \
    php-gd \
    php-mysqlnd \
    php-gettext \
    php-json \
    php-xml \
    php-fpm \
    php-intl \
    php-zip

# Download the MySQL repository package
RUN wget https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm

# Import the GPG key for the MySQL repository
RUN rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022

# Install the MySQL repository package
RUN yum localinstall mysql80-community-release-el7-3.noarch.rpm -y

# Install the MySQL community server package
RUN yum install mysql-community-server -y

# Change directory to the html directory
WORKDIR /var/www/html

# Install Git
RUN yum install -y git

# Clone the GitHub repository
RUN git clone https://"your_personal_access_token"@github.com/"your_github_username"/"your_repository_name".git 

# Unzip the zip folder containing the web files
RUN unzip "your_repository_name"/"web_file_zip" -d "your_repository_name"/

# Copy the web files into the HTML directory
RUN cp -av "your_repository_name"/"web_file_unzip"/. /var/www/html

# Remove the repository we cloned
RUN rm -rf "your_repository_name"

# Enable the mod_rewrite setting in the httpd.conf file
RUN sed -i '/<Directory "\/var\/www\/html">/,/<\/Directory>/ s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf

# Give full access to the /var/www/html directory
RUN chmod -R 777 /var/www/html

# Give full access to the storage directory
RUN chmod -R 777 storage/

# Use the sed command to search the .env file for a line that starts with APP_ENV= and replace everything after the = character
RUN sed -i '/^APP_ENV=/ s/=.*$/=production/' .env

# Use the sed command to search the .env file for a line that starts with APP_URL= and replace everything after the = character
RUN sed -i '/^APP_URL=/ s/=.*$/=https:\/\/"your_domain_name"\//' .env

# Use the sed command to search the .env file for a line that starts with DB_HOST= and replace everything after the = character
RUN sed -i '/^DB_HOST=/ s/=.*$/="your_rds_endpoint"/' .env

# Use the sed command to search the .env file for a line that starts with DB_DATABASE= and replace everything after the = character
RUN sed -i '/^DB_DATABASE=/ s/=.*$/="your_rds_db_name"/' .env

# Use the sed command to search the .env file for a line that starts with DB_USERNAME= and replace everything after the = character
RUN sed -i '/^DB_USERNAME=/ s/=.*$/="your_rds_master_username"/' .env

# Use the sed command to search the .env file for a line that starts with DB_PASSWORD= and replace everything after the = character
RUN sed -i '/^DB_PASSWORD=/ s/=.*$/="your_rds_db_password"/' .env

# Copy the file, AppServiceProvider.php from the host file system into the container at the path app/Providers/AppServiceProvider.php
COPY AppServiceProvider.php app/Providers/AppServiceProvider.php

# Expose the default Apache and MySQL ports
EXPOSE 80 3306

# Start Apache and MySQL
ENTRYPOINT ["/usr/sbin/httpd", "-D", "FOREGROUND"]







<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //set whatever level you want
        error_reporting(E_ALL ^ E_NOTICE);
    
        if (env('APP_ENV') === 'production') {
            \Illuminate\Support\Facades\URL::forceScheme('https');
        }
    }
    

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
  
}





# Run the docker build command
docker build `
--build-arg PERSONAL_ACCESS_TOKEN= `
--build-arg GITHUB_USERNAME= `
--build-arg REPOSITORY_NAME= `
--build-arg WEB_FILE_ZIP= `
--build-arg WEB_FILE_UNZIP= `
--build-arg DOMAIN_NAME= `
--build-arg RDS_ENDPOINT= `
--build-arg RDS_DB_NAME= `
--build-arg RDS_MASTER_USERNAME= `
--build-arg RDS_DB_PASSWORD= `
-t <image-tag> .







# make shell script executable powershell: 
Set-ExecutionPolicy -ExecutionPolicy Unrestricted

# make shell script executable mac:
chmod +x build_image.sh

----------------------------------------------------------------

# aws cli command to create an amazon ecr repository
aws ecr create-repository --repository-name <repository-name> --region <region>
  
----------------------------------------------------------------

# retag docker image 
docker tag <image-tag> <repository-uri>

# login to ecr
aws ecr get-login-password | docker login --username AWS --password-stdin <aws_account_id>.dkr.ecr.<region>.amazonaws.com

# push docker image to ecr repository 
docker push <repository-uri>
  
----------------------------------------------------------------

# to create an ssh tunnel in powershell, execute the following command:
ssh -i <key_pier.pem> ec2-user@<public-ip> -L 3306:<rds-endpoint>:3306 -N


# to create an ssh tunnel in linux or macOS, execute the following commands:
Note: Be sure to replace YOUR_EC2_KEY, LOCAL_PORT, RDS_ENDPOINT, REMOTE_PORT, EC2_USER, and EC2_HOST with your relevant information.

ssh -i "YOUR_EC2_KEY" -L LOCAL_PORT:RDS_ENDPOINT:REMOTE_PORT EC2_USER@EC2_HOST -N -f





flyway.url=jdbc:mysql://localhost:3306/
flyway.user=
flyway.password=
flyway.locations=filesystem:sql
flyway.cleanDisabled=false








PERSONAL_ACCESS_TOKEN=
GITHUB_USERNAME=
REPOSITORY_NAME=
WEB_FILE_ZIP=
WEB_FILE_UNZIP=
DOMAIN_NAME=
RDS_ENDPOINT=
RDS_DB_NAME=
RDS_MASTER_USERNAME=
RDS_DB_PASSWORD=



{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::rentzone-app-env-variables/rentzone.env"
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": "s3:GetBucketLocation",
            "Resource": "arn:aws:s3:::rentzone-app-env-variables"
        }
    ]
}

C:\Users\User\Downloads\IMG_2144.jpg

